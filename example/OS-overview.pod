=head1 OPERATING SYSTEM OVERVIEW

=head2 HARDWARE

There is 64K of memory and maximum of 256 ports.  Input ports are
arranged in pairs - the first of each pair, when read, will tell
how many bytes are available to be read.  The second is where
actual data is available.

=head2 BOOTING

The OS loaded into RAM (it needs to be in RAM because there's
self-modifying code in there) at address 0x0000.  The ROM is then
swapped out, and the machine jumps to 0x0000.

There's just a few bytes here, and a jump past the RST block.

The stack is initialised and the memory-map reset.

It then reads each port in turn until no more data are available,
flushing them.  The various bits of memory reserved for the OS are
then marked as such in the memory map.  Finally, the file
C<shell.cmd> is executed.

=head1 REGISTERS

The alternate register set may be used by OS functions.  Any
functions that do so are un-interruptable.

=head1 MEMORY MAP

    0xFF80 to 0xFFFF: stack
    0xFF00 to 0xFF7F: memory allocation bitmap
                      each bit represents 64 bytes
    ...
    0x0000 to 0xXXXX: OS code

=head1 ACCESS TO OS FUNCTIONS

Parameters are passed via the stack, and are all sixteen bits long
The last parameter passed should be the function number to call.
To execute the function, C<RST 1>.  This preserves all registers.
RST 1 itself is not re-entrant.

